# HG changeset patch
# User Corey Ford <cford@mozilla.com>
# Date 1371771669 25200
#      Thu Jun 20 16:41:09 2013 -0700
# Node ID 853e7af569dcd34aaf60d151a26d6d6854b95835
# Parent  c12150cfdfef0afcba76233da774e5f64eadc06f
Bug 829816 - Treat \0 and U+0000 as U+FFFD.

diff --git a/layout/reftests/bugs/228856-1-ref.html b/layout/reftests/bugs/228856-1-ref.html
--- a/layout/reftests/bugs/228856-1-ref.html
+++ b/layout/reftests/bugs/228856-1-ref.html
@@ -1,27 +1,27 @@
 <!doctype html>
 <html><head>
 <!-- This is a test for behavior made up by Mozilla in the absence of
      specification.  Future CSS specifications may define the behavior
      differently.  -->
 <title>\0 in CSS</title>
 <style>
-p#a:before { content: "0x" }
-p#b:before { content: "00x" }
-p#c:before { content: "000x" }
-p#d:before { content: "0000x" }
-p#e:before { content: "00000x" }
-p#f:before { content: "000000x" }
-p#g:before { content: "0 x" }
-p#h:before { content: "00 x" }
-p#i:before { content: "000 x" }
-p#j:before { content: "0000 x" }
-p#k:before { content: "00000 x" }
-p#l:before { content: "000000 x" }
+p#a:before { content: "\FFFDx" }
+p#b:before { content: "\FFFDx" }
+p#c:before { content: "\FFFDx" }
+p#d:before { content: "\FFFDx" }
+p#e:before { content: "\FFFDx" }
+p#f:before { content: "\FFFDx" }
+p#g:before { content: "\FFFD  x" }
+p#h:before { content: "\FFFD  x" }
+p#i:before { content: "\FFFD  x" }
+p#j:before { content: "\FFFD  x" }
+p#k:before { content: "\FFFD  x" }
+p#l:before { content: "\FFFD  x" }
 </style>
 </head><body>
 <p id="a">(a)</p>
 <p id="b">(b)</p>
 <p id="c">(c)</p>
 <p id="d">(d)</p>
 <p id="e">(e)</p>
 <p id="f">(f)</p>
diff --git a/layout/reftests/bugs/228856-1.html b/layout/reftests/bugs/228856-1.html
--- a/layout/reftests/bugs/228856-1.html
+++ b/layout/reftests/bugs/228856-1.html
@@ -6,22 +6,22 @@
 <title>\0 in CSS</title>
 <style>
 p#a:before { content: "\0x" }
 p#b:before { content: "\00x" }
 p#c:before { content: "\000x" }
 p#d:before { content: "\0000x" }
 p#e:before { content: "\00000x" }
 p#f:before { content: "\000000x" }
-p#g:before { content: "\0 x" }
-p#h:before { content: "\00 x" }
-p#i:before { content: "\000 x" }
-p#j:before { content: "\0000 x" }
-p#k:before { content: "\00000 x" }
-p#l:before { content: "\000000 x" }
+p#g:before { content: "\0  x" }
+p#h:before { content: "\00  x" }
+p#i:before { content: "\000  x" }
+p#j:before { content: "\0000  x" }
+p#k:before { content: "\00000  x" }
+p#l:before { content: "\000000  x" }
 </style>
 </head><body>
 <p id="a">(a)</p>
 <p id="b">(b)</p>
 <p id="c">(c)</p>
 <p id="d">(d)</p>
 <p id="e">(e)</p>
 <p id="f">(f)</p>
diff --git a/layout/reftests/bugs/228856-2-ref.html b/layout/reftests/bugs/228856-2-ref.html
index 38c02d51902742ec4aead2eaf1f4adaf77c5dd41..ede243db8c11fab966c4879236629b175724b46c
GIT binary patch
literal 6195
zc$|%x>yFwu6oB)ar*Ijm+G?AGJ1oN>TBfUx)OM>KMyr+3NG360H6&?bprfkqz9)_o
zY_PrXqiW*sT>RO=878mp|C%rU{rUlYTzvk7zCOMG^e{(F*Z2SF&VB!WabFJfyjI)y
zKYVF6Q2l9c8B52$e>@(&W7kWvjlcNY-?ClQ^K+KbfO#Pco72XmxHp|_2@c_6M;Jy$
zs7t=@>EW(9Phv)5<}O}R(nLXdb=PF%2jkgpQLx2XPT1Yk;!k%}Bz)z%XtAX^TGNQ|
z5KQA7k==@fAqml!r%yTh?dkUxeBO8nE$}zMa7NH^OJYPq%4obnEGegxW+W%sfgrXe
zy8_=5KnpxhPy#nIUL#8)-U<#F$#Rrr(p8x#*|VI61P$F4W$4}G{NcfClta8-MskK|
zd`O}L$%~xeX&<m09Vy$QeH@ZCjiLV)+2R9*0yIYR$4Auh+FqIFV{#-1lD!2uqA;mW
zXEf>$-1gg|cZBzBTSW2PYv?3qa33?Y-m`s1$`pA@0=lLFW;BUWvgVO>MYt~Qfhj)o
zh{F7ER804nQ3i{{yDf7qU6KblCHWh;8AafWm8x(E>#t@eKcFxxX7>UE!UouO-D#sS
zVU$H=`bZ*R60nQo5Y{D0NyaD<<^r4(w1!lx{YK1u;+KJqNzPtiFEH3dV($cb4toVw
z7yaDfY(ryrl`xj<#x2-UNt9&cRfL0Yw~!Hb-;vPGmW@|Q6yBm=5XLg}6CH~30ghZ8
z(M>#t9g~)WAq=KC3}G9&8IMFQuTOR`3d12iz<5~%-C&H%B4ad28QLXrlBYNzWgTF>
z9cIDy6tT$&SpL<R_<T}@9-luwlT{MFz+4$#!R-mlivJf6RXTmRM|mZ0;-_%0Xo7}!
z&DS@rTiS*vE5dnx*W|UD)0<_BhR8=ZukkLuEs${HLx>bei^#Tw(u%!A+XXA5Va1-K
zj-{99nWhUzY2kUMDefqhpJ$hZ0*K)=MIB)1vUQD=&czI>K#QV|P*kH9MRG5CDV7#=
ziaL%`S)-_<0D48;f(e(cD-_A7MM{@TxtK~7Xi+2=&?{0}&`Ie!mdYAMN<xF8-bKoy
zxhsVAB-A3TCw5VdS`?Xk(F;>r&<X1~N@a~AC51szzt9NjuaMHeTp$r>QPi&<v<kH-
zl6%ohv9zF5)OVE18by5t&?_47o%TGtLXnJGqznuXnh3Ngk_+e+DJ|%v40I1#Rav7*
zNoY_s<jfU<PM}54u-Y^KyJJr2^fIJ!Iu%1ls!~rK4tO}ntFwGwsL~zh!eP;C&_+U~
zw`>Iw<nwsX9t=ftRS^@2!@Q=03fI!&JU`J<g==U>)6DZs--e^~@I2F3ca+lV4yhr9
zQ8tO}3C=YyShlV-)Tt*@#n?TGL;XbCJ;}`&4QYBXcq&eHskGixM`4Vfx&;>T!|e)B
zGHo}+Px#Y}su;T`Ila-7(u2WJ*U^;Lds5PwJ@x8@MPt|5>PfWSmN?!|wB6HXGe%oV
z4+dMs`7V{#dr}gaJ@pHnQ0F>B{nIju7`vx__1smo-ILsm(U7JGgQvcul-7IdD~!?8
zfNwi~)?MLArtO9XXV0C8v3ru!8$BsK7z_;@O=-O+C7s#RkYm?bI<a;~!)g~@vxiPe
zjb@~}1}{TLDtGcBpZ=edjF|qGhqn(|3Oc<_dDWjKp6S&^igmPsnisK=v0U|XW-d3<
zm#YJ%mmkHDfa^CsF6^fIUcS-Q)5bbyf%@Gy(wD2YqqW>fQ?3q_rk75?*1u$_>zTq!
z%(BHl;<ulST)Z=;oeDx02#&8nq%uRj8bW3WzPNZDkxdT`6bR{|p@7Cn<kCT-Gf121
zj~c4l(m?OdA*6xcpCA&7T+&L-+-x6-Wl~mq2TL^*{EmbaBOK`-@g1zzY)1rX;kujy
vK%geBS8<g@1J|!P90^j(4J0l)7vS?RA)jSa_=o?>2v_`9#|i&2e%kmCQfdl2

diff --git a/layout/reftests/bugs/228856-2-style-1.css b/layout/reftests/bugs/228856-2-style-1.css
index a6d6acf36a1f9e09007d24dfbf9d57b016d870c5..bb7e68084bfe79d6007c320692fcf5a5c67449bb
GIT binary patch
literal 1069
zc${^T%TB{E5JkK0S6nHJN=P-~RoZj~-@vjP#~u=k#I_t$K!|_GX+jcO$4ehy-=oni
z0gLaNyF%%8ZoD^jmhK@;Wn7k5T)ge^YP4T}kSa=_<))H*{44?Q@QoumuLQ5wyi$eE
z;EnB|4A62Zl`huqltjuNs17vX>nr5p>!y8vbsa9GI)*^kiiC6CwPx5@kJ@O{ST1Nk
zq+d#E2n|&vym1Yh(!5s^HTR+feRAQeFBnY-FKW^r#6`)_l_iH%-HdgGBhn}9L>*Gx
z#>rhkF|bhg@xbCCe!p47?;n9n5C{v!BC5;8oGueHx@;k$x=h4%nTYE$F{hiTEt?sY
z+Oe6>w#kgH*d>w3bO)?6wp~IRmOvYioWgz*_awm^topnoxf+(hwlh7Xr!(@-)ZPvZ
z7woPT>VxO(eq=aj!+`tjlx_YqOxfc&fId00?Kzv|b|d?%9N5zZ!@!;=jAWl|r@s6J
D6Ye@m

diff --git a/layout/reftests/bugs/228856-2.html b/layout/reftests/bugs/228856-2.html
index 0bc8ebb5c525c30f0c3f586c223e2ac4b7054455..ac02a54da98ac063d5498d16e72caca89e54d179
GIT binary patch
literal 6156
zc$}4(ZExE)6ovKKzk+puV#O-S@6L;2xOF--K-v|HgJFOXK#}N(s4RIBZ8sS9-*-ug
zGU<?<>Ht9`oqG=XkQNyRZ*G2HEdToU34LCExkKL`KHl9fP}lYSKZgt7zggZ?4@O?E
z@B5#=b~~u~bQ4Oqm%e{E9K6HO%Zq1!`G=p-O*-;RT9Al(F^#*kPQdQXf&_;#Tx>86
z5i51^-#fCu?k@6-;*7e>mo4t1sJgoDQv8E*w<{DSVNqgw{jmJaJ!gh*To)}9Qld3U
zF)s;8RwBH4!f}ja^!4GcM87=z+JnzK520oF9b{pF(ILSZ!ZD#Fdqy;`y0a~CiHki(
zG{GAtPcTTCJj+oIHw&Io<SB1T7*Sl5C@-X|$|&E_lEfHI-6ulPhx^6tt=Fj@@#a!o
zQbe+Sp6+qUJb}|Lq9r;InxI`4<2A{k{ZBXv_XGk+h8FktXyEm|%I0%^z<XT02XRWE
zQ-i_z`FP^?-?O%(a7PnX#l6?il8nOrkfQaD?h0I4lv^B;HHkt>@(kr`UfCqVbwv+I
z@t&sy`WL3GyN7~M7#!Z(%4_A~G77i2d<Qqv6nN1JRT#tgtIqfb1XI?#7kE(90NSoQ
z>vRH2Xo_d|I0a1(bi*u$amly1paj?CqOinh4OUOP=ep;CUln$Olw{vgfz#`fzNENJ
zFs3Le@cO!2Ga9)3iQD(0vh1=<HjTdK8LlCKd9j01R3`Z@Wut)bdJXL%Ff{;Gn7yD4
z%$*&~5!UE{`_0gN)#D%bEJPt-_y>8LKKzdIG%qfpRq+-27k&c2Dmj*Ja9u2y4qBE%
zO<j$e+F|=zR2PfV(NC0yX<b~Ej(@6D)bi4at+W&P{IwB0<?#zR(eMdw2ee>+v$x51
zc6)<LF>3;U3-@BOM<l-PzCG(*k$!h}w(5}>`RMFzxY=H@n{nWSNRkq!m8C>zUrYN;
zD@$XcJ(W62`r}-a>nNd*b4{G1WIfJbD-=Qf_yofMG-TClgF%*BFbrx8jnslcw$x)#
zLUkAhj*_Lppja3%44Ecg^;%$%r4|fBfk8+u7-UO51|?L7VdyAX8Vrhs0mBG1tN|@B
z$WjZ2QH`OIS}@3#dJIaa4#UV%vNRYJ3j>BRLk0FNFvwC1hOw9pLTbSvTk0_=p*jp>
zN6FG)P%I1>CVa*`&RbxRr4|g6=1WmaEf{1=Jq9IIhhgF<SsDzAg#p8qYg#}!3M~kx
z4TApzaJ18RUy9Rpe(FdmP1j-Jg!NIZk&84eOWiUVu?JQEBUnbfRWC}x$>Xi{;ASf4
z)#|8TEE{zs<XUyTULMt{kZaVA(u~Ksz5$Ms{y5j?I!dTID;klaQ6`4W2G$lYTJ>78
zk=1rK^&)yy+u6v*Mm9>ifel+trBFQ^#mLNN$Yd#Ba9XgD)pj;R!A7X<Y-D328ztSq
zX6PuPdNzuYnGLK$yfN+A$Z9*AdbvHS?QCRYBO4{%z=o~6QmCGdVq|7BW(Xmt9UEC~
zXEPS_MyTy<WMd;6CEdVg>?omnHj0s%&4f=czFxIpBdhIfCe3%MR@>Rg#zr<ux`EBa
zQ9|`>6eBa6DVMb)bJW_oOdBpOs2oj=Or%@`k*Ooa9eK#B_LscCrvGipc~^$Qw*a2l
z^n0ewhE(O8lxQ|h7n%sMg)&E6oJKSy(&j`a0c{d{FplI*yj9P187EcFNr`@DU7SXU
zNoI|>P$HTVsT<qbx8{gS9iJ_1Eb3E^<Kf0BtL;FDkVOPbO;lT%MWaT9%p!RC@SNIB
zFPbPKq!&$V(WN*;(uvMbL|UhdMkJc05q&rnA&uzcQH0~#OB$)U%MbVXFe&4_fuVYJ
zgr}Jg8yKxu=XE;Wkn5zwIfHH_bkaebPB(6J$5S_*ZX)T@Qvg1Hsra;*!7qM_23P!4
KE#Rl@v(A6BX77Li

diff --git a/layout/style/nsCSSScanner.cpp b/layout/style/nsCSSScanner.cpp
--- a/layout/style/nsCSSScanner.cpp
+++ b/layout/style/nsCSSScanner.cpp
@@ -134,30 +134,31 @@ IsHorzSpace(int32_t ch) {
  */
 static inline bool
 IsVertSpace(int32_t ch) {
   return IsClosedCharClass(ch, IS_VSPACE);
 }
 
 /**
  * True if 'ch' is a character that can appear in the middle of an
- * identifier.
+ * identifier. This includes U+0000 since it is handled as U+FFFD, but for
+ * purposes of GatherText it should not be included in IsOpenCharClass.
  */
 static inline bool
 IsIdentChar(int32_t ch) {
-  return IsOpenCharClass(ch, IS_IDCHAR);
+  return IsOpenCharClass(ch, IS_IDCHAR) || ch == '\0';
 }
 
 /**
  * True if 'ch' is a character that by itself begins an identifier.
  * (This is a subset of IsIdentChar.)
  */
 static inline bool
 IsIdentStart(int32_t ch) {
-  return IsOpenCharClass(ch, IS_IDSTART);
+  return IsOpenCharClass(ch, IS_IDSTART) || ch == '\0';
 }
 
 /**
  * True if the two-character sequence aFirstChar+aSecondChar begins an
  * identifier.
  */
 static inline bool
 StartsIdent(int32_t aFirstChar, int32_t aSecondChar)
@@ -534,17 +535,17 @@ nsCSSScanner::GatherEscape(nsString& aOu
   MOZ_ASSERT(Peek() == '\\', "should not have been called");
   int32_t ch = Peek(1);
   if (ch < 0) {
     // If we are in a string (or a url() containing a string), we want to drop
     // the backslash on the floor.  Otherwise, we want to treat it as a U+FFFD
     // character.
     Advance();
     if (!aInString) {
-      aOutput.Append(0xFFFD);
+      aOutput.Append(UCS2_REPLACEMENT_CHAR);
     }
     return true;
   }
   if (IsVertSpace(ch)) {
     if (aInString) {
       // In strings (and in url() containing a string), escaped
       // newlines are completely removed, to allow splitting over
       // multiple lines.
@@ -556,17 +557,21 @@ nsCSSScanner::GatherEscape(nsString& aOu
     return false;
   }
 
   if (!IsHexDigit(ch)) {
     // "Any character (except a hexadecimal digit, linefeed, carriage
     // return, or form feed) can be escaped with a backslash to remove
     // its special meaning." -- CSS2.1 section 4.1.3
     Advance(2);
-    aOutput.Append(ch);
+    if (ch == 0) {
+      aOutput.Append(UCS2_REPLACEMENT_CHAR);
+    } else {
+      aOutput.Append(ch);
+    }
     return true;
   }
 
   // "[at most six hexadecimal digits following a backslash] stand
   // for the ISO 10646 character with that number, which must not be
   // zero. (It is undefined in CSS 2.1 what happens if a style sheet
   // does contain a character with Unicode codepoint zero.)"
   //   -- CSS2.1 section 4.1.3
@@ -579,32 +584,31 @@ nsCSSScanner::GatherEscape(nsString& aOu
   int i = 0;
   do {
     val = val * 16 + HexDigitValue(ch);
     i++;
     Advance();
     ch = Peek();
   } while (i < 6 && IsHexDigit(ch));
 
-  // Silently deleting \0 opens a content-filtration loophole (see
-  // bug 228856), so what we do instead is pretend the "cancels the
-  // meaning of special characters" rule applied.
+  // "Interpret the hex digits as a hexadecimal number. If this number is zero,
+  // or is greater than the maximum allowed codepoint, return U+FFFD
+  // REPLACEMENT CHARACTER" -- CSS Syntax Level 3
   if (MOZ_UNLIKELY(val == 0)) {
-    do {
-      aOutput.Append('0');
-    } while (--i);
+    aOutput.Append(UCS2_REPLACEMENT_CHAR);
   } else {
     AppendUCS4ToUTF16(ENSURE_VALID_CHAR(val), aOutput);
-    // Consume exactly one whitespace character after a nonzero
-    // hexadecimal escape sequence.
-    if (IsVertSpace(ch)) {
-      AdvanceLine();
-    } else if (IsHorzSpace(ch)) {
-      Advance();
-    }
+  }
+
+  // Consume exactly one whitespace character after a
+  // hexadecimal escape sequence.
+  if (IsVertSpace(ch)) {
+    AdvanceLine();
+  } else if (IsHorzSpace(ch)) {
+    Advance();
   }
   return true;
 }
 
 /**
  * Consume a run of "text" beginning with the current read position,
  * consisting of characters in the class |aClass| (which must be a
  * suitable argument to IsOpenCharClass) plus escape sequences.
@@ -637,16 +641,21 @@ nsCSSScanner::GatherText(uint8_t aClass,
       aText.Append(&mBuffer[mOffset], n - mOffset);
       mOffset = n;
     }
     if (n == mCount) {
       break;
     }
 
     int32_t ch = Peek();
+    if (ch == '\0') {
+      Advance();
+      aText.Append(UCS2_REPLACEMENT_CHAR);
+      continue;
+    }
     MOZ_ASSERT(!IsOpenCharClass(ch, aClass),
                "should not have exited the inner loop");
 
     if (ch != '\\') {
       break;
     }
     if (!GatherEscape(aText, inString)) {
       break;
diff --git a/layout/style/test/Makefile.in b/layout/style/test/Makefile.in
--- a/layout/style/test/Makefile.in
+++ b/layout/style/test/Makefile.in
@@ -79,16 +79,18 @@ MOCHITEST_FILES =	test_acid3_test46.html
 		test_bug664955.html \
 		test_bug667520.html \
 		test_bug645998.html \
 		file_bug645998-1.css \
 		file_bug645998-2.css \
 		test_bug716226.html \
 		test_bug765590.html \
 		test_bug798567.html \
+		test_bug829816.html \
+		file_bug829816.css \
 		test_cascade.html \
 		test_ch_ex_no_infloops.html \
 		test_compute_data_with_start_struct.html \
 		test_computed_style.html \
 		test_computed_style_no_pseudo.html \
 		test_condition_text.html \
 		test_condition_text_assignment.html \
 		test_default_computed_style.html \
diff --git a/layout/style/test/file_bug829816.css b/layout/style/test/file_bug829816.css
new file mode 100644
index 0000000000000000000000000000000000000000..8f12ba6f56396b3f2560d18c380280658ddb45b0
GIT binary patch
literal 76
xc$`a8s8&eM&nrpIE3r~gVo<UM@=Af+BHg0Y;#8m*gF-D=5{jZ2EUIEa$^e#}7kvN#

diff --git a/layout/style/test/test_bug829816.html b/layout/style/test/test_bug829816.html
new file mode 100644
--- /dev/null
+++ b/layout/style/test/test_bug829816.html
@@ -0,0 +1,56 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=829816
+-->
+<head>
+  <meta charset="utf-8">
+  <title>Test for Bug 829816</title>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+
+  <style type="text/css">
+    b { content: "\0";      counter-reset: \0      }
+    b { content: "\00";     counter-reset: \00     }
+    b { content: "\000";    counter-reset: \000    }
+    b { content: "\0000";   counter-reset: \0000   }
+    b { content: "\00000";  counter-reset: \00000  }
+    b { content: "\000000"; counter-reset: \000000 }
+  </style>
+
+  <!-- U+0000 characters in <style> would be replaced by the HTML parser -->
+  <link rel="stylesheet" type="text/css" href="file_bug829816.css"/>
+
+  <script type="application/javascript">
+
+  /** Test for Bug 829816 **/
+  var ss = document.styleSheets[1];
+
+  for (var i = 0; i < 6; i++) {
+    is(ss.cssRules[i].style.content, "\"\uFFFD\"",
+        "\\0 in strings should be converted to U+FFFD");
+    is(ss.cssRules[i].style.counterReset, "\uFFFD",
+        "\\0 in identifiers should be converted to U+FFFD");
+  }
+
+  is(document.styleSheets[2].cssRules[0].style.content, "\"\uFFFD\"",
+      "U+0000 in strings should be converted to U+FFFD");
+  is(document.styleSheets[2].cssRules[0].style.counterReset, "\uFFFD",
+      "U+0000 in identifiers should be converted to U+FFFD");
+  is(document.styleSheets[2].cssRules[1].style.content, "\"\uFFFD\"",
+      "U+0000 in strings should be converted to U+FFFD");
+  is(document.styleSheets[2].cssRules[1].style.counterReset, "\uFFFD",
+      "U+0000 in identifiers should be converted to U+FFFD");
+
+
+  </script>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=829816">Mozilla Bug 829816</a>
+<p id="display"></p>
+<div id="content" style="display: none">
+</div>
+<pre id="test">
+</pre>
+</body>
+</html>
